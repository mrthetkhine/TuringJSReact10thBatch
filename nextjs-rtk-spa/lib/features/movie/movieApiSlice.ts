import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {Movie} from "@/app/types/movies";

export const movieApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3000/api" }),
    reducerPath: "moviesApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Movie"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getAllMovie: build.query<Movie[], undefined>({
            query: () => `movies`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags:['Movie']
        }),
        saveMovie:build.mutation<Movie,Movie>({
            query: (movie:Movie) => ({
                url: `movies`,
                method: 'POST',
                body: movie,
            }),
            invalidatesTags:['Movie'],
            transformResponse: (response: { data: Movie }, meta, arg) => response.data,
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetAllMovieQuery,useSaveMovieMutation } = movieApiSlice;