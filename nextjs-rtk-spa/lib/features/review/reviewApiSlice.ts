import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {Movie} from "@/app/types/movies";
import {movieApiSlice} from "@/lib/features/movie/movieApiSlice";
import Review from "@/app/types/review";

export const reviewApiSlice =  movieApiSlice.injectEndpoints({
    endpoints: (build) => {
        return {
            // Supply generics for the return type (in this case `QuotesApiResponse`)
            // and the expected query argument. If there is no argument, use `void`
            // for the argument type instead.
            getReviewByMovieId: build.query<Review[], string>({
                query: (movieId:string) => `/reviews/movies/${movieId}`,

            }),
            saveReview:build.mutation<Review,Review>({
                "query": (review:Review) => ({
                    "url": `/reviews/`,
                    "method": 'POST',
                    "body": review,
                }),
                //Pessimistic update
                async "onQueryStarted"(review:Review , { dispatch, queryFulfilled }) {
                    console.log('review ',review);
                    let patchResult ;
                    try {
                        const {data:savedReview} = await queryFulfilled;
                        patchResult = dispatch(
                            reviewApiSlice.util.updateQueryData('getReviewByMovieId', review.movie, (draft) => {
                                draft.push(savedReview);
                                console.log('Draft ',draft);
                                return draft;
                            }),
                        );
                        console.log('Saved Review ',savedReview);
                    } catch(err) {
                        console.log('Err ',err);
                    }
                }

            }),
            deleteReview:build.mutation<Review,Review>({
                query: (review:Review) => ({
                    url: `/reviews/${review._id}`,
                    method: 'DELETE',

                }),
                //Pessimistic update
                async onQueryStarted(review:Review , { dispatch, queryFulfilled }) {
                    console.log('review ',review);
                    let patchResult ;
                    try {
                        const {data:deleteReview} = await queryFulfilled;
                        patchResult = dispatch(
                            reviewApiSlice.util.updateQueryData('getReviewByMovieId', review.movie, (draft) => {
                                draft = draft.filter(r=>r._id!= deleteReview._id);
                                console.log('Draft ',draft);
                                return draft;
                            }),
                        );
                        console.log('Delete Review ',deleteReview);
                    } catch(err) {
                        console.log('Err ',err);
                    }
                }

            }),
        };
    },
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetReviewByMovieIdQuery,
                useSaveReviewMutation,
                useDeleteReviewMutation,
                } = reviewApiSlice;